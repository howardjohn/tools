apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Namespace }}-account
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: {{ .Release.Namespace }}-role
rules:
  - apiGroups: ["extensions"]
    resources: ["deployments"]
    verbs: ["get", "patch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Namespace }}-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Release.Namespace }}-role
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Namespace }}-account
    namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: istio-upgrader
  labels:
    app: istio-upgrader
spec:
  schedule: "*/{{ .Values.redployMinutes }} * * * *" # Every x minutes
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            sidecar.istio.io/inject: "false"
          labels:
            app: istio-upgrader
        spec:
          serviceAccountName: {{ .Release.Namespace }}-account
          containers:
            - name: istio-upgrader
              image: {{ .Values.kubectlImage }}
              command:
                - bash
                - -c
                - |-
                  #!/bin/bash
                  function force_redeploy() {
                    kubectl set env --all deployment --env="LAST_MANUAL_RESTART=$(date +%s)" -n istio-system
                  }
                  echo "`date`: upgrading all deployments in istio-system"
                  force_redeploy
          restartPolicy: OnFailure

